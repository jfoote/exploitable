### BEGIN LICENSE ###
### Use of the triage tools and related source code is subject to the terms
### of the license below.
###
### ------------------------------------------------------------------------
### Copyright (C) 2011 Carnegie Mellon University. All Rights Reserved.
### Portions Copyright 2013 BlackBerry Ltd. All Rights Reserved.
### ------------------------------------------------------------------------
### Redistribution and use in source and binary forms, with or without
### modification, are permitted provided that the following conditions are
### met:
###
### 1. Redistributions of source code must retain the above copyright
###    notice, this list of conditions and the following acknowledgments
###    and disclaimers.
###
### 2. Redistributions in binary form must reproduce the above copyright
###    notice, this list of conditions and the following disclaimer in the
###    documentation and/or other materials provided with the distribution.
###
### 3. All advertising materials for third-party software mentioning
###    features or use of this software must display the following
###    disclaimer:
###
###    "Neither Carnegie Mellon University nor its Software Engineering
###     Institute have reviewed or endorsed this software"
###
### 4. The names "Department of Homeland Security," "Carnegie Mellon
###    University," "CERT" and/or "Software Engineering Institute" shall
###    not be used to endorse or promote products derived from this software
###    without prior written permission. For written permission, please
###    contact permission@sei.cmu.edu.
###
### 5. Products derived from this software may not be called "CERT" nor
###    may "CERT" appear in their names without prior written permission of
###    permission@sei.cmu.edu.
###
### 6. Redistributions of any form whatsoever must retain the following
###    acknowledgment:
###
###    "This product includes software developed by CERT with funding
###     and support from the Department of Homeland Security under
###     Contract No. FA 8721-05-C-0003."
###
### THIS SOFTWARE IS PROVIDED BY CARNEGIE MELLON UNIVERSITY ``AS IS'' AND
### CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER
### EXPRESS OR IMPLIED, AS TO ANY MATTER, AND ALL SUCH WARRANTIES, INCLUDING
### WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ARE
### EXPRESSLY DISCLAIMED. WITHOUT LIMITING THE GENERALITY OF THE FOREGOING,
### CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND
### RELATING TO EXCLUSIVITY, INFORMATIONAL CONTENT, ERROR-FREE OPERATION,
### RESULTS TO BE OBTAINED FROM USE, FREEDOM FROM PATENT, TRADEMARK AND
### COPYRIGHT INFRINGEMENT AND/OR FREEDOM FROM THEFT OF TRADE SECRETS.
### END LICENSE ###
'''
A collection of objects used to classify GDB Inferiors (Targets).
'''

import copy
import warnings

import rules
import versions
from tools import AttrDict

class Tag(object):
    '''
    A Tag used for classification. A Tag is a partial description of the
    state of a GDB Inferior. Tags can be ordered by ranking.
    '''
    def __init__(self, tag_dict):
        self.__dict__ = tag_dict

    def __cmp__(self, other):
        if not issubclass(type(other), type(self)):
            raise TypeError("cannot compare type {} to type {}".format(type(other), type(self)))
        return self.ranking[0] - other.ranking[0]

    def __str__(self):
        return "{0} ({1[0]:d}/{1[1]:d})".format(self.short_desc, self.ranking)

class Classification(AttrDict):
    '''
    A classification of a state of a GDB Inferior. Describes how exploitable
    the current state of the GDB Inferior is.

    An instance of this object is returned by a Classifier.
    '''
    version = versions.exploitable_version
    def __init__(self, target):
        AttrDict.__init__(self)
        self.tags = []
        self.target = target

    def __add__(self, tag):
        if not issubclass(type(tag), Tag):
            raise TypeError("cannot add type {} to type {}".format(type(tag), type(self)))
        self.tags.append(tag)
        self.tags.sort()
        for k, v in self.tags[0].__dict__.iteritems():
            self[k] = v

        return self

    def __cmp__(self, other):
        if not issubclass(type(other), type(self)):
            raise TypeError("cannot compare type {} to type {}".format(type(other), type(self)))

        if len(self.tags) == 0 or len(other.tags) == 0:
            return len(self.tags) - len(other.tags)

        i = 0
        while i < len(self.tags) and i < len(other.tags):
            result = cmp(self.tags[i], other.tags[i])
            if result:
                return result
            i += 1
        return result

    def __str__(self):
        if not self.tags:
            return "No matches"

        result = ["Description: {}".format(self.desc),
                  "Short description: {}".format(self.tags[0]),
                  "Hash: {}.{}".format(self.hash.major, self.hash.minor),
                  "Exploitability Classification: {}".format(self.category),
                  "Explanation: {}".format(self.explanation)]
        if len(self.tags) > 1:
            result.append("Other tags: {}".format(
                ", ".join(str(r) for r in self.tags[1:])))
        result.append("")
        return "\n".join(result)

class MachineClassification(Classification):
    def __str__(self):
        if not self.tags:
            return "No matches"

        result = []
        #result.append("IDENTITY:{:s}")
        result.append("PROCESSOR:{}".format(self.target.arch.upper())) # X86/X64/ARM/UNKNOWN
        #result.append("CLASS:{:s}" # KERNEL/USER)
        #result.append("QUALIFIER:{:s}") # KERNEL_PROCESS/KERNEL_PROCESS_REMOTE/
                                       # KERNEL_SMALL_DUMP/KERNEL_DUMP/KERNEL_FULL_DUMP/
                                       # USER_PROCESS/USER_PROCESS_REMOTE/
                                       # USER_SMALL_DUMP/USER_DUMP
        #result.append("CLASS:UNINITIALIZED") # debugger is uninit
        #result.append("EVENT:{:s}") # DEBUG_EVENT_*
                                     #   BREAKPOINT, EXCEPTION, CREATE_THREAD,
                                     #   EXIT_THREAD, CREATE_PROCESS, EXIT_PROCESS,
                                     #   LOAD_MODULE, UNLOAD_MODULE, SYSTEM_ERROR
        #result.append("EXCEPTION_FAULTING_ADDRESS:{:#16.16X}")
        #result.append("EXCEPTION_CODE:{:#X}")
        #result.append("EXCEPTION_LEVEL:{:s}") # FIRST_CHANCE/SECOND_CHANCE
        #result.append("EXCEPTION_TYPE:{:s}")
        #result.append("EXCEPTION_SUBTYPE:{:s}") # READ/WRITE/DEP
        try:
            result.append("FAULTING_INSTRUCTION:{}".format(str(self.target.current_instruction()).split(":\t")[1].strip()))
        except IndexError:
            result.append("FAULTING_INSTRUCTION:?")
        result.append("MAJOR_HASH:{}".format(self.hash.major))
        result.append("MINOR_HASH:{}".format(self.hash.minor))
        bt_result = ["STACK_FRAME:{}".format(i.terse()) for i in self.target.backtrace() if i.type() != 2]
        result.append("STACK_DEPTH:{}".format(len(bt_result)))
        result.extend(bt_result)
        result.append("INSTRUCTION_ADDRESS:{:#016x}".format(self.target.pc()))
        try:
            result.append("INVOKING_STACK_FRAME:{}".format(self.target.faulting_frame().position))
        except AttributeError:
            result.append("INVOKING_STACK_FRAME:?")
        result.append("DESCRIPTION:{}".format(self.desc))
        result.append("SHORT_DESCRIPTION:{}".format(self.tags[0]))
        if len(self.tags) > 1:
            result.append("OTHER_RULES:{}".format(", ".join(str(t) for t in self.tags[1:])))
        result.append("CLASSIFICATION:{}".format(self.category))
        #result.append("BUG_TITLE:{} - {} starting at {} (Hash={:#08x}.{:#08x})".format(
        #    " ".join(w.capitalize() for w in self.category.split("_")),
        #    self.desc, addr, self.hash.major, self.hash.minor))
        result.append("EXPLANATION:{}".format(self.explanation))
        #result.append("URL:{}")
        result.append("")
        return "\n".join(result)

class Classifier(object):
    '''
    A Classifier used for classifying the state of a Target (a Linux GDB
    Inferior).
    '''
    _major_hash_depth = 5

    def __init__(self):
        '''
        Organizes the nested list of rules (dicts) for classification

        The rules specified in rules.py are organized into AttrDicts ("rules").
        Each rule is composed of a tag and an analyzer.
        '''
        processed_rules = []
        num_rules = sum(len(rl) for (_, rl) in rules.rules)
        ranking = 1
        for cat, user_rule_list in rules.rules:
            for user_rule in user_rule_list:
                analyzer = user_rule["analyzer"]
                tag_data = copy.deepcopy(user_rule)
                del tag_data["analyzer"]
                tag_data["ranking"] = (ranking, num_rules)
                tag_data["category"] = cat
                rule = AttrDict(analyzer=analyzer, tag=Tag(tag_data))
                processed_rules.append(rule)
                ranking += 1

        self.rules = processed_rules

    def getClassification(self, target, machine=False):
        '''
        Returns the Classification of target, which is a Classification of the
        exploitability of a Linux GDB Inferior.
        '''
        if machine:
            c = MachineClassification(target)
        else:
            c = Classification(target)
        for rule in self.rules:
            try:
                match = rule.analyzer(target)
                if match:
                    c += rule.tag
            except Exception as e:
                warnings.warn("Error while analyzing rule {}: {}".format(rule.tag, e))

        c.hash = target.hash()
        return c

